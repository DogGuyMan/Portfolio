(()=>{"use strict";var __webpack_modules__={741:()=>{eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQxLmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLy4vc3R5bGUvc3R5bGUuc2Nzcz8yODI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///741\n")},347:()=>{eval('\n;// CONCATENATED MODULE: ./src/replaceDecimal.ts\n/*\r\nreplaceToDecimal\r\n    다음은 string을 입력받으면\r\n    공백기준으로 Split하여\r\n    정수배열을 리턴하는 함수다.\r\n*/\r\nfunction replaceToDecimal(_str) {\r\n    const regex = /[^0-9]/g;\r\n    let splitedStr = _str.split(\' \');\r\n    let resStrings = [];\r\n    splitedStr.forEach(_E => {\r\n        resStrings.push(~~(_E.replace(regex, "")));\r\n    });\r\n    return resStrings;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/section.ts\n\r\nclass Section {\r\n    /*\r\n        생성자\r\n            멤버 변수 초기화\r\n            생성자는 offset을 받아 초기화 해준다\r\n\r\n        replaceToDecimal(window.getComputedStyle(this.mSectionSetElements[0]).getPropertyValue(\'margin\'))[0];\r\n            CSS string가져오기 -> 정수로 바꾸기\r\n\r\n            이게 뭔가 싶은데 세단락으로 나눠보면\r\n            ```\r\n            1. replaceToDecimal( : string) : Array<number>\r\n                1. 즉, CSS의 string 값을 읽어와\r\n                2. CSS string을 split하고\r\n                3. 정수값 배열로 반환하는 함수다.\r\n\r\n            2. window.getComputedStyle(this.mSectionSetElements[0])\r\n                .getPropertyValue(\'margin\'))\r\n                적용된 CSS string 값을 가져오는 역할을 한다.\r\n                    margin: 148px 80px 0; 을 가져온다\r\n            \r\n            3. [0]\r\n                만약 margin: 148px 80px 0; 을 가져왔으면\r\n                    [148, 80, 0] 으로 반환한다\r\n                    거기서 우린 margin top을 알고싶으니 [0]을 가져온다.\r\n            ```\r\n    */\r\n    constructor() {\r\n        this.mSectionSet = document.querySelector("section.ContentSection");\r\n        this.mSectionSetElements = this.mSectionSet.querySelectorAll("section");\r\n        this.mTempIndex = this.calCurSection();\r\n        this.mOffset = replaceToDecimal(window.getComputedStyle(this.mSectionSetElements[0]).getPropertyValue(\'margin\'))[0];\r\n    }\r\n    /*\r\n        calCurSection\r\n            현재 스크롤 바에 따라서 어느 섹션에 있는지 리턴하는 매서드.\r\n    */\r\n    calCurSection() {\r\n        let curScrollY = window.pageYOffset;\r\n        for (let i = 0; i < this.mSectionSetElements.length; i++) {\r\n            const curSection = this.mSectionSetElements[i];\r\n            let curSectionHeight = curSection.getBoundingClientRect().bottom + curScrollY;\r\n            if (curScrollY <= curSectionHeight - this.mOffset) {\r\n                this.mTempIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        return this.mTempIndex;\r\n    }\r\n    /*\r\n        디버깅 용으로 만든 메서드\r\n            생성자에 따라 멤버 변수가 잘 정의되었는지 혹인\r\n    */\r\n    DEBUG() {\r\n        /*console.log(this.mSectionSet);\r\n        console.log(this.mSectionSetElements);\r\n        this.mSectionSetElements.forEach( _E=>{\r\n            console.log(_E.getBoundingClientRect().bottom);\r\n        })*/\r\n        console.log(replaceToDecimal(window.getComputedStyle(this.mSectionSetElements[0]).getPropertyValue(\'margin\'))[0]);\r\n    }\r\n    /*\r\n        calCurSection\r\n            접근가능한 매서드\r\n    */\r\n    GetCurIndex() {\r\n        return this.calCurSection();\r\n    }\r\n}\r\nconst sectionClass = new Section();\r\n\r\n\n;// CONCATENATED MODULE: ./src/sideBar.ts\nclass Sidebar {\r\n    constructor() {\r\n        this.SIDEBAR_CONTENT_ACTIVE = "Active";\r\n        this.sidebarSection = document.querySelector(".main > .SidebarSection");\r\n        this.navigatorElement = this.sidebarSection.querySelector(".sidebar_fixed");\r\n        this.sidebarMenuList = this.navigatorElement.querySelectorAll(".menu > .menu_list > li");\r\n        this.isSidebarActive = new Array(this.sidebarMenuList.length);\r\n        this.isSidebarActive.fill(false);\r\n        this.menuObject = this.GetSectionObeject();\r\n    }\r\n    GetSectionObeject() {\r\n        let index = 0;\r\n        let tempObject = new Map;\r\n        let tempKey;\r\n        this.sidebarMenuList.forEach(_E => {\r\n            tempKey = _E.outerText;\r\n            tempObject.set(tempKey, index++);\r\n        });\r\n        return tempObject;\r\n    }\r\n    MenuActive(_curSectionIndex) {\r\n        const ACTIVE = this.SIDEBAR_CONTENT_ACTIVE;\r\n        if (this.isSidebarActive[_curSectionIndex] === false) {\r\n            this.isSidebarActive.fill(false);\r\n            this.isSidebarActive[_curSectionIndex] = true;\r\n            this.sidebarMenuList.forEach(_E => {\r\n                _E.classList.remove(ACTIVE);\r\n            });\r\n            this.sidebarMenuList[_curSectionIndex].classList.add(ACTIVE);\r\n        }\r\n    }\r\n}\r\nconst sideBarInstance = new Sidebar();\r\n\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n//import {_var_} from \'./___.ts\'\r\n\r\n\r\nconsole.log("bundle complete");\r\nwindow.addEventListener(\'scroll\', () => {\r\n    sideBarInstance.MenuActive(sectionClass.GetCurIndex());\r\n});\r\n//console.log("_var_");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///347\n')}};__webpack_modules__[347]();var __webpack_exports__={};__webpack_modules__[741]()})();